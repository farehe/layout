@use "sass:math";

@use "../abstracts/mixins.scss" as *;

@mixin tiny-grid {
  // Settings
  $grid-columns: 12 !default;
  $grid-gutter: 1em !default;
  // $grid-container-max-width: 1920px !default;
  // $grid-container-max-width-lg: 1320px !default;
  // $grid-container-max-width-md: 1040px !default;
  // $grid-container-max-width-sm: 880px !default;
  // $grid-container-max-width-xs: 680px !default;
  $grid-container-gutter: 1em !default;

  $grid-container-max-width: 100vw !default;
  $grid-container-max-width-lg: 85vw !default;
  $grid-container-max-width-md: 70vw !default;
  $grid-container-max-width-sm: 60vw !default;
  $grid-container-max-width-xs: 48vw !default;
  $grid-container-max-width-xxs: 30vw !default;

  $grid-breakpoints: (
    xs: 320px,
    sm: 940px,
    md: 1180px,
    lg: 1540px,
    xl: 1700px,
  ) !default;

  // Container Elements
  %container-base {
    margin-left: auto;
    margin-right: auto;
    width: 100%;
    padding-left: $grid-container-gutter;
    padding-right: $grid-container-gutter;
    box-sizing: border-box;

    @include breakpoint("medium") {
      max-width: calc(100% - 1em) !important;
      padding-left: 0.5em;
      padding-right: 0.5em;
    }
    @include breakpoint("small") {
      max-width: calc(100% - 0.5em) !important;
      padding-left: 0.35em;
      padding-right: 0.35em;
    }
  }

  .container {
    @extend %container-base;
    max-width: $grid-container-max-width;

    &.xxs {
      max-width: max($grid-container-max-width-xxs, 40em);
    }
    &.xs {
      max-width: max($grid-container-max-width-xs, 50em);
    }
    &.sm {
      max-width: max($grid-container-max-width-sm, 60em);
    }
    &.md {
      max-width: max($grid-container-max-width-md, 80em);
    }
    &.lg {
      max-width: max($grid-container-max-width-lg, 90em);
    }
  }

  .container-fluid {
    @extend %container-base;
  }

  .row {
    margin-left: math.div($grid-gutter, -3);
    margin-right: math.div($grid-gutter, -3);
    box-sizing: border-box;
    font-size: var(--step--3);

    > * {
      font-size: var(--step-0);
    }
  }

  // Columns
  [class^="col-"],
  [class*=" col-"] {
    display: inline-block;
    vertical-align: top;
    width: 100%;
    min-height: 1px;
    padding-left: math.div($grid-gutter, 3);
    padding-right: math.div($grid-gutter, 3);
    box-sizing: border-box;
  }

  // Create non-breakpoint specific columns and column offsets
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      width: (math.div(100%, $grid-columns) * $i);
    }
    .col-offset-#{$i} {
      margin-left: (math.div(100%, $grid-columns) * $i);
    }
  }

  // Create breakpoint specific columns
  @each $breakpoint-name in map-keys($grid-breakpoints) {
    // Get each key's value
    $breakpoint-width: map-get($grid-breakpoints, $breakpoint-name);

    // Create media query for each breakpoint
    @media (min-width: $breakpoint-width) {
      // Add offset-0 to reset offset in specific breakpoints
      .col-#{$breakpoint-name}-offset-0 {
        margin-left: 0;
      }

      // Create columns and column offsets for each size in this breakpoint
      @for $i from 1 through $grid-columns {
        .col-#{$breakpoint-name}-#{$i} {
          width: (math.div(100%, $grid-columns) * $i);
        }
        .col-#{$breakpoint-name}-offset-#{$i} {
          margin-left: (math.div(100%, $grid-columns) * $i);
        }
      }
    }
  }
}
@include tiny-grid;
