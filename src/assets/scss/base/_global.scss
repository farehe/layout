@use "sass:math";

@use "../abstracts/mixins" as *;

$dividedCount: 4;
.responsive {
  max-width: 100%;
  height: auto;
}
.textSecondary {
  color: var(--text2);
}

.brandColor {
  color: var(--brand);
}

.color-warning {
  color: var(--warning)
}
.color-warning-2 {
  color: var(--warning-2)
}
.color-success {
  color: var(--success)
}
.objectFitCover{
  object-fit: cover;
}

.color-error {
  color: var(--error)
}

.color-link {
  color: var(--link-color)
}

.linkOnHover {
  &:hover {
    color: var(--link-color)!important;
  }
}
.textOnHover {
  &:hover {
    color: var(--text)!important;
  }
}

.fs-xxxl {
  font-size: var(--fs-xxxl);
}
.fs-xxl {
  font-size: var(--fs-xxl);
}
.fs-xxl-1 {
  font-size: var(--fs-xxl-1);
}

.fs-xl {
  font-size: var(--fs-xl);
}

.fs-lg {
  font-size: var(--fs-lg);
}

.fs-md-2 {
  font-size: var(--fs-md-2);
}
.fs-md-1 {
  font-size: var(--fs-md-1);
}
.fs-md {
  font-size: var(--fs-md);
}

.fs-sm {
  font-size: var(--fs-sm);
}

.fs-xs {
  font-size: var(--fs-xs);
}

.fs-xxs {
  font-size: var(--fs-xxs);
}
.bg-surface-secondary{
  background-color: var(--surface-secondary);
}
.bg-card-1 {
  background-color: var(--surface1);
}

.bg-card-2 {
  background-color: var(--surface2);
}

.bg-card-3 {
  background-color: var(--surface3);
}

.bg-card-4 {
  background-color: var(--surface4);
}

.bg-card-5 {
  background-color: var(--surface5);
}

.bg-brand {
  background-color: var(--brand);
}

.bg-link{
  background-color: var(--link-color);
}
.bg-textSecondary{
  background-color: var(--text2);
}

.bg-border-2{
  background-color: var(--border-color-2);
}
.pointer {
  cursor: pointer;
}

.b {
  &.br1 {
    border-right: 0.12em solid var(--border-color);
  }

  &.bl1 {
    border-left: 0.12em solid var(--border-color);
  }

  &.bt1 {
    border-top: 0.12em solid var(--border-color);
  }

  &.bb1 {
    border-bottom: 0.12em solid var(--border-color);
  }

  &.b2{
    border: 1.5px solid var(--border-color-2);
  }
  &.br2 {
    border-right: 1.5px solid var(--border-color-2);
  }

  &.bl2 {
    border-left: 1.5px solid var(--border-color-2);
  }

  &.bt2 {
    border-top: 1.5px solid var(--border-color-2);
  }

  &.bb2 {
    border-bottom: 1.5px solid var(--border-color-2);
  }


  &.br0 {
    border-right: 0;
  }

  &.bl0 {
    border-left: 0;
  }

  &.bt0 {
    border-top: 0;
  }

  &.bb0 {
    border-bottom: 0;
  }
}

.shadow-1 {
  box-shadow: var(--shadow1);
}

.shadow-2 {
  box-shadow: var(--shadow2);
}

.shadow-3 {
  box-shadow: var(--shadow3);
}

.shadow-4 {
  box-shadow: var(--shadow4);
}




.textSecondary {
  color: var(--text2);
}

.textDecNone {
  text-decoration: none;
}

//size
.h100 {
  height: 100%;
}

.hUnset {
  height: unset;
}

.w100 {
  width: 100%;
}

.wAuto {
  width: auto;
}

.mW100 {
  max-width: 100%;
}

.mH100 {
  max-height: 100%;
}

.relative {
  position: relative;
}

.absolute {
  position: absolute;
}

.fixed {
  position: fixed;
}

.overflowYAuto {
  overflow-y: auto;
}
.overflowXAuto {
  overflow-x: auto;
}
.overflowHide {
  overflow: hidden;
}

.color-text {
  color: var(--text);
}

.colorInitial {
  color: initial;
}

@for $i from 1 through 24 {
  .gap-#{$i} {
    gap: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 1 through 24 {
  .gap-y-#{$i} {
    gap: #{math.div($i, $dividedCount)}em 0;
  }
}

@for $i from 1 through 24 {
  .gap-x-#{$i} {
    gap: 0 #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .m#{$i} {
    margin: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .mt#{$i} {
    margin-top: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .mr#{$i} {
    margin-right: #{math.div($i, $dividedCount)}em;
  }
}

.mrAuto {
  margin-right: auto;
}

@for $i from 0 through 24 {
  .mb#{$i} {
    margin-bottom: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .ml#{$i} {
    margin-left: #{math.div($i, $dividedCount)}em;
  }
}

.mlAuto {
  margin-left: auto;
}

@for $i from 0 through 24 {
  .mx#{$i} {
    margin-right: #{math.div($i, $dividedCount)}em;
    margin-left: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .my#{$i} {
    margin-top: #{math.div($i, $dividedCount)}em;
    margin-bottom: #{math.div($i, $dividedCount)}em;
  }
}

// PADDING
@for $i from 0 through 24 {
  .p#{$i} {
    padding: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .py#{$i} {
    padding-top: #{math.div($i, $dividedCount)}em;
    padding-bottom: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .px#{$i} {
    padding-left: #{math.div($i, $dividedCount)}em;
    padding-right: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .pt#{$i} {
    padding-top: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .pr#{$i} {
    padding-right: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .pb#{$i} {
    padding-bottom: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 24 {
  .pl#{$i} {
    padding-left: #{math.div($i, $dividedCount)}em;
  }
}

@for $i from 0 through 16 {
  .radius-#{$i} {
    border-radius: #{$i * 0.5}em;
  }
}

@for $i from 1 through 6 {
  .max#{$i}LineText {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $i;
    /* number of lines to show */
    -webkit-box-orient: vertical;
  }
}
.captalizeText {
  text-transform: capitalize;
}

.radius-30 {
  border-radius: 30px;
}

.noWrapText {
  white-space: nowrap;
}

.ellipsisText {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.textUppercase {
  text-transform: uppercase;
}
.inset-0 {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.flex {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

.alignCenter {
  @include css3-prefix(align-items, center);
}

.alignStart {
  @include css3-prefix(align-items, flex-start);
}

.alignEnd {
  @include css3-prefix(align-items, flex-end);
}

.alignBase {
  @include css3-prefix(align-items, baseline);
}

.justifyCenter {
  @include css3-prefix(justify-content, center);
}

.justifyStart {
  @include css3-prefix(justify-content, flex-start);
}

.justifyEnd {
  @include css3-prefix(justify-content, flex-end);
}

.justifyBetween {
  @include css3-prefix(justify-content, space-between);
}
.justifySelfEnd{
  justify-self: end;
}

.column {
  @include css3-prefix(flex-direction, column);
}

.columnReverse {
  @include css3-prefix(flex-direction, column-reverse);
}

.flexOne {
  @include css3-prefix(flex, 1 1 0);
}

.flexTwo {
  @include css3-prefix(flex, 2);
}

.wrap {
  @include css3-prefix(flex-wrap, wrap);
}

.rowReverse {
  @include css3-prefix(flex-direction, row-reverse);
}

.alignSelfEnd {
  @include css3-prefix(align-self, flex-end);
}

.alignSelfStart {
  @include css3-prefix(align-self, flex-start);
}

.alignSelfCenter {
  @include css3-prefix(align-self, center);
}

//grid css
.grid {
  display: -ms-grid;
  display: -moz-grid;
  display: grid;

  @for $i from 1 through 48 {
    &.col#{$i} {
      grid-template-columns: repeat($i, 1fr);
    }

    .span-#{$i} {
      grid-column: span $i;
    }
  }

  &.placeCenter {
    @include css3-prefix(place-items, center);
  }
}

.dNone {
  display: none;
}

.font-w-300 {
  font-weight: 300;
}

.font-w-400 {
  font-weight: 400;
}

.font-w-500 {
  font-weight: 500;
}

.font-w-600 {
  font-weight: 600;
}

.font-w-700 {
  font-weight: 700;
}


.textAlign {
  &.left {
    text-align: left;
  }

  &.center {
    text-align: center;
  }

  &.right {
    text-align: right;
  }
}

// Loop through the size map and generate styles
@each $size,
$breakpoint in $size-map {
  @include generate-styles($size, $breakpoint) {

    .fs-xxxl-#{$size} {
      font-size: var(--fs-xxxl);
    }
    .fs-xxl-#{$size} {
      font-size: var(--fs-xxl);
    }
    .fs-xxl-1-#{$size} {
      font-size: var(--fs-xxl-1);
    }

    .fs-xl-#{$size} {
      font-size: var(--fs-xl);
    }

    .fs-lg-#{$size} {
      font-size: var(--fs-lg);
    }

    .fs-md-#{$size} {
      font-size: var(--fs-md);
    }
    .fs-md-1-#{$size} {
      font-size: var(--fs-md-1);
    }
    .fs-md-2-#{$size} {
      font-size: var(--fs-md-2);
    }

    .fs-sm-#{$size} {
      font-size: var(--fs-sm);
    }

    .fs-xs-#{$size} {
      font-size: var(--fs-xs);
    }

    .fs-xxs-#{$size} {
      font-size: var(--fs-xxs);
    }

    .dNone-#{$size} {
      display: none;
    }

    //size
    .h100-#{$size} {
      height: 100%;
    }

    .hUnset-#{$size} {
      height: unset;
    }

    .w100-#{$size} {
      width: 100%;
    }



    .b {
      &.br1-#{$size} {
        border-right: 0.12em solid var(--border-color);
      }

      &.bl1-#{$size} {
        border-left: 0.12em solid var(--border-color);
      }

      &.bt1-#{$size} {
        border-top: 0.12em solid var(--border-color);
      }

      &.bb1-#{$size} {
        border-bottom: 0.12em solid var(--border-color);
      }

      &.br0-#{$size} {
        border-right: 0;
      }

      &.bl0-#{$size} {
        border-left: 0;
      }

      &.bt0-#{$size} {
        border-top: 0;
      }

      &.bb0-#{$size} {
        border-bottom: 0;
      }
    }

    

    @for $i from 1 through 48 {
      .width-#{$i}-#{$size} {
        width: #{$i * 0.5}em;
      }
    }

    .wAuto-#{$size} {
      width: auto;
    }

    .mW100-#{$size} {
      max-width: 100%;
    }

    .mH100-#{$size} {
      max-height: 100%;
    }

    @for $i from 1 through 24 {
      .gap-#{$i}-#{$size} {
        gap: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 1 through 24 {
      .gap-y-#{$i}-#{$size} {
        gap: #{math.div($i, $dividedCount)}em 0;
      }
    }

    @for $i from 1 through 24 {
      .gap-x-#{$i}-#{$size} {
        gap: 0 #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .m#{$i}-#{$size} {
        margin: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .mt#{$i}-#{$size} {
        margin-top: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .mr#{$i}-#{$size} {
        margin-right: #{math.div($i, $dividedCount)}em;
      }
    }

    .mrAuto-#{$size} {
      margin-right: auto;
    }

    @for $i from 0 through 24 {
      .mb#{$i}-#{$size} {
        margin-bottom: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .ml#{$i}-#{$size} {
        margin-left: #{math.div($i, $dividedCount)}em;
      }
    }

    .mlAuto-#{$size} {
      margin-left: auto;
    }

    @for $i from 0 through 24 {
      .mx#{$i}-#{$size} {
        margin-right: #{math.div($i, $dividedCount)}em;
        margin-left: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .my#{$i}-#{$size} {
        margin-top: #{math.div($i, $dividedCount)}em;
        margin-bottom: #{math.div($i, $dividedCount)}em;
      }
    }

    // PADDING
    @for $i from 0 through 24 {
      .p#{$i}-#{$size} {
        padding: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .py#{$i}-#{$size} {
        padding-top: #{math.div($i, $dividedCount)}em;
        padding-bottom: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .px#{$i}-#{$size} {
        padding-left: #{math.div($i, $dividedCount)}em;
        padding-right: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .pt#{$i}-#{$size} {
        padding-top: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .pr#{$i}-#{$size} {
        padding-right: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .pb#{$i}-#{$size} {
        padding-bottom: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 24 {
      .pl#{$i}-#{$size} {
        padding-left: #{math.div($i, $dividedCount)}em;
      }
    }

    @for $i from 0 through 16 {
      .radius-#{$i}-#{$size} {
        border-radius: #{$i * 0.5}em;
      }
    }

    @for $i from 1 through 6 {
      .max#{$i}LineText-#{$size} {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: $i;
        /* number of lines to show */
        -webkit-box-orient: vertical;
      }
    }

    .radius-50-#{$size} {
      border-radius: 50%;
    }

    .noWrapText-#{$size} {
      white-space: nowrap;
    }

    .ellipsisText-#{$size} {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .flex-#{$size} {
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
    }

    .alignCenter-#{$size} {
      @include css3-prefix(align-items, center);
    }

    .alignStart-#{$size} {
      @include css3-prefix(align-items, flex-start);
    }

    .alignEnd-#{$size} {
      @include css3-prefix(align-items, flex-end);
    }

    .alignBase-#{$size} {
      @include css3-prefix(align-items, baseline);
    }

    .justifyCenter-#{$size} {
      @include css3-prefix(justify-content, center);
    }

    .justifyStart-#{$size} {
      @include css3-prefix(justify-content, flex-start);
    }

    .justifyEnd-#{$size} {
      @include css3-prefix(justify-content, flex-end);
    }

    .justifyBetween-#{$size} {
      @include css3-prefix(justify-content, space-between);
    }

    .column-#{$size} {
      @include css3-prefix(flex-direction, column);
    }
    .row-#{$size} {
      @include css3-prefix(flex-direction, row);
    }

    .columnReverse-#{$size} {
      @include css3-prefix(flex-direction, column-reverse);
    }

    .flexOne-#{$size} {
      @include css3-prefix(flex, 1 1 0);
    }

    .flexTwo-#{$size} {
      @include css3-prefix(flex, 2);
    }

    .wrap-#{$size} {
      @include css3-prefix(flex-wrap, wrap);
    }

    .rowReverse-#{$size} {
      @include css3-prefix(flex-direction, row-reverse);
    }

    .alignSelfEnd-#{$size} {
      @include css3-prefix(align-self, flex-end);
    }

    .alignSelfStart-#{$size} {
      @include css3-prefix(align-self, flex-start);
    }

    .alignSelfCenter-#{$size} {
      @include css3-prefix(align-self, center);
    }

    //grid css
    .grid {
      @for $i from 1 through 48 {
        &.col#{$i}-#{$size} {
          grid-template-columns: repeat($i, 1fr);
        }

        .span-#{$i}-#{$size} {
          grid-column: span $i;
        }
      }

      &.placeCenter-#{$size} {
        @include css3-prefix(place-items, center);
      }
    }

    .textAlign {
      &.left-#{$size} {
        text-align: left;
      }

      &.center-#{$size} {
        text-align: center;
      }

      &.right-#{$size} {
        text-align: right;
      }
    }


    .relative-#{$size} {
      position: relative;
    }

    .absolute-#{$size} {
      position: absolute;
    }

    .fixed-#{$size} {
      position: fixed;
    }

    .inset-0-#{$size} {
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }
  }
}